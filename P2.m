%%
%Source code was generated by Alberto Cuoci can be found at https://github.com/acuoci/CFDofReactiveFlows/blob/master/codes/finite_difference/advection_diffusion_2d.m
%This code has been edited by: Cole A. Calderon and Nichith K. Ratheesh for
%the purpose of the paper titled: "Swarm-mediated phage transport disrupts 
%a biofilm inherently protected from phage penetration"

%%
close all;
clear variables;

% User-defined data
%-------------------------------------------------------------------------%
nx=33;                  % number of grid points along x
ny=33;                  % number of grid points along y
nstep=2                 % number of time steps
lengthx=1500;           % domain length along x [micron]
lengthy=1500;           % domain length along y [micron]
D=0.009;                % diffusion coefficient [micron2/s]
fin=1397286;            % inlet value of f      [concentration or number of phage particles]

% Number of time steps changed based on diffusion coeffecient
% Diffusion coefficients were manipulated to give range around calculated diffusion coeffecient of phage particles
    % i.e. 0.009 micron2/s : 2 time steps, 0.041 micron2/sec : 10 time
    % steps, 0.074 micron2/s : 15 time steps, 0.22007 micron2/s : 88 time steps

% Pre-processing of user-defined data
%-------------------------------------------------------------------------%
% Calculate grid steps
hx=lengthx/(nx-1);      % grid step along x [m]
hy=lengthy/(ny-1);      % grid step along y [m] 

% Numerical setup: time step
sigma = .1;                         % safety coefficient
dt_diff  = 1/4*min(hx^2, hy^2)/D;   % diffusion [s]
dt = sigma*min(dt_diff)*10;         % time step [s]
% Step size must be manipulated based on dimensions of system 
% This code is using the forward Euler method.
% The Euler method is numerically unstable so large step sizes will result
% in a simulation where the solution/concentration grows over time.
    % Time step interval and number of time steps equate to 30 hours of
    % simulation time
    
% Memory allocation
f=zeros(nx,ny);     % current numerical solution
fo=zeros(nx,ny);    % previous numerical solution

% Dirichlet boundary conditions along the east side
f(nx, ny*1/3:(ny*2/3+1)) = fin; %f(nx, ny*1/3:(ny*2/3+1)) = fin;

% Definition of rectangular mesh (graphical purposes only)
xaxis = 0:hx:lengthx;
yaxis = 0:hy:lengthy;

% Video setup
%-------------------------------------------------------------------------%
% video_name = 'timetest1.mp4';
% videompg4 = VideoWriter(video_name, 'MPEG-4');
% open(videompg4);
% 
% Advancing in time
%-------------------------------------------------------------------------%

timearray{nstep,1} = zeros;
t = 0.;
for m=1:nstep
    
    % Plot the current solution
    hold off; 
    mesh(xaxis, yaxis, f'); 
    axis([0 lengthx 0 lengthy 0 2000000]);
    xlabel('x'); ylabel('y'); zlabel('f');
    message = sprintf('time=%d\n', t);
    time = annotation('textbox',[0.15 0.8 0.15 0.15],'String',message,'EdgeColor','none');
    frame = getframe(gcf);
%     writeVideo(videompg4,frame);
    timearray{m} = message;
    delete(time); 

    % Forward Euler method
    fo=f;
    for i=2:nx-1
        for j=2:ny-1
            f(i,j) = fo(i,j)...                                         
                    -(0)...                                             % Removal of x-direction advection
                    -(0)...                                             % Removal of y-direction advection
                    +(D*dt/hx^2)*(fo(i+1,j)-2*fo(i,j)+fo(i-1,j))...     % x-direction diffusion
                    +(0);                                               % Removal of y-direction diffusion
        end
    end   
    
    % Boundary conditions (Neumann's only)
    f(1:nx,1)=fo(1:nx,2);        % south
    f(1:nx,ny)=fo(1:nx,ny-1);    % north
    f(1,1:ny)=fo(2,1:ny);        % west
    
    % New time step
    t=t+dt;
    
end
concens = f(:,20);
nxx = lengthx/nx
distance = (0:nxx:lengthx-1);
con_dis = [concens(:), distance(:)];
writematrix(con_dis, 'nmcg_justdiffusion.csv')          % writes csv file of middle slice of diffusion in x-direction



% Closing the video stream
% close(videompg4);
